package userInterface;

import java.io.File;

/**
 * SlideUI is the main class for the user interface. It contains the menus and
 * the PuzzlePanel.
 *
 * @author Griffin
 */
public class SlideUI extends javax.swing.JFrame
{

    /**
     * Creates new form SlideUI
     */
    public SlideUI()
    {
        initComponents();
        setSize(500, 550);
    }

    /**
     * Loads a board from a file serialized by save(File file) and passes it to
     * puzzlePanel.
     *
     * @param file The file to read from
     */
    public void load(File file)
    {
        setPuzzle(serializer.Deserializer.deserializeBoard(file));
    }

    /**
     * Byte serializes the board by calling a method in PuzzlePanel that calls
     * serializer.Serializer.
     *
     * @param file The file to write to
     */
    public void save(File file)
    {
        puzzlePanel.save(file);
    }
    /**
     * Loads a board from an XML file and passes it to
     * puzzlePanel.
     *
     * @param file The file to read from
     */
    public void XMLLoad(File file)
    {
        setPuzzle(serializer.Deserializer.XMLDeserializeBoard(file));
    }
    
    /**
     * Serializes the board to an XML by calling a method in PuzzlePanel that
     * calls serializer.Serializer.
     *
     * @param file The file to write to
     */
    public void XMLSave(File file)
    {
        puzzlePanel.XMLSave(file);
    }

    /**
     * This method sets undoMenuItem either enabled or disabled.
     *
     * @param bool True to set undoMenuItem enabled.
     */
    public void setUndoEnabled(boolean bool)
    {
        undoMenuItem.setEnabled(bool);
    }

    /**
     * Creates a VictoryPopup.
     */
    public void displayVictory()
    {
        VictoryPopup popup = new VictoryPopup();
        popup.setLocationRelativeTo(this);
        popup.setVisible(true);

    }

    /**
     * This creates a random Board and passes it to puzzlePanel.
     *
     * @param x The width of the board that is created by the new PuzzlePanel
     * @param y The height of the board that is created by the new PuzzlePanel
     */
    void createPuzzle(int x, int y)
    {
        slide.Board board = new slide.Board(x, y);
        board.shuffle();
        setPuzzle(board);
    }

    /**
     * This takes in a Board and sets puzzlePanel's board to this new one.
     * 
     * @param board The new board
     */
    void setPuzzle(slide.Board board)
    {
        if (puzzlePanel != null)
        {
            getContentPane().remove(puzzlePanel);
        }
        puzzlePanel = (PuzzlePanel) getContentPane().add(new PuzzlePanel(this, board));
        savePuzzleButton.setEnabled(true);
        XMLSavePuzzleButton.setEnabled(true);
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newPuzzleMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        savePuzzleButton = new javax.swing.JMenuItem();
        loadPuzzleButton = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        XMLSavePuzzleButton = new javax.swing.JMenuItem();
        XMLLoadPuzzleButton = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("slide");

        menuBar.setName(""); // NOI18N

        fileMenu.setText("File");

        newPuzzleMenuItem.setLabel("New Puzzle");
        newPuzzleMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newPuzzleMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newPuzzleMenuItem);
        fileMenu.add(jSeparator1);

        savePuzzleButton.setText("Save Puzzle to .sld");
        savePuzzleButton.setEnabled(false);
        savePuzzleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                savePuzzleButtonActionPerformed(evt);
            }
        });
        fileMenu.add(savePuzzleButton);

        loadPuzzleButton.setText("Load Puzzle from .sld");
        loadPuzzleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadPuzzleButtonActionPerformed(evt);
            }
        });
        fileMenu.add(loadPuzzleButton);
        fileMenu.add(jSeparator2);

        XMLSavePuzzleButton.setText("Save Puzzle to XML");
        XMLSavePuzzleButton.setEnabled(false);
        XMLSavePuzzleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                XMLSavePuzzleButtonActionPerformed(evt);
            }
        });
        fileMenu.add(XMLSavePuzzleButton);

        XMLLoadPuzzleButton.setText("Load Puzzle from XML");
        XMLLoadPuzzleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                XMLLoadPuzzleButtonActionPerformed(evt);
            }
        });
        fileMenu.add(XMLLoadPuzzleButton);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        undoMenuItem.setEnabled(false);
        undoMenuItem.setLabel("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This creates a new NewPuzzleWindow.
     *
     * @param evt unused
     */
    private void newPuzzleMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newPuzzleMenuItemActionPerformed
    {//GEN-HEADEREND:event_newPuzzleMenuItemActionPerformed
        NewPuzzleWindow newPuzzleWindow = new NewPuzzleWindow(this);
        newPuzzleWindow.setVisible(true);
        newPuzzleWindow.setLocationRelativeTo(this);
    }//GEN-LAST:event_newPuzzleMenuItemActionPerformed

    /**
     * Undoes a move on the current puzzle.
     *
     * @param evt
     */
    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_undoMenuItemActionPerformed
    {//GEN-HEADEREND:event_undoMenuItemActionPerformed
        puzzlePanel.undo();
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void XMLSavePuzzleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_XMLSavePuzzleButtonActionPerformed
    {//GEN-HEADEREND:event_XMLSavePuzzleButtonActionPerformed
        new FileSelectWindow(this, "XMLSave").setVisible(true);
    }//GEN-LAST:event_XMLSavePuzzleButtonActionPerformed

    private void XMLLoadPuzzleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_XMLLoadPuzzleButtonActionPerformed
    {//GEN-HEADEREND:event_XMLLoadPuzzleButtonActionPerformed
        new FileSelectWindow(this, "XMLLoad").setVisible(true);
    }//GEN-LAST:event_XMLLoadPuzzleButtonActionPerformed

    private void savePuzzleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_savePuzzleButtonActionPerformed
    {//GEN-HEADEREND:event_savePuzzleButtonActionPerformed
        new FileSelectWindow(this, "save").setVisible(true);
    }//GEN-LAST:event_savePuzzleButtonActionPerformed

    private void loadPuzzleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadPuzzleButtonActionPerformed
    {//GEN-HEADEREND:event_loadPuzzleButtonActionPerformed
        new FileSelectWindow(this, "load").setVisible(true);
    }//GEN-LAST:event_loadPuzzleButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SlideUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(()
                -> 
                {
                    SlideUI ui = new SlideUI();
                    ui.setVisible(true);
                    ui.setLocationRelativeTo(null);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem XMLLoadPuzzleButton;
    private javax.swing.JMenuItem XMLSavePuzzleButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem loadPuzzleButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newPuzzleMenuItem;
    private javax.swing.JMenuItem savePuzzleButton;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
    /**
     * The current puzzle.
     */
    private PuzzlePanel puzzlePanel;
}
